
(sys:load "/libs/core/instruments.xtm")


(make-instrument synth0 fmsynth)
(io:osc:start-server 5000 "osc-receive-5000")
(define address (cons "localhost" 5000))


(bind-func dsp:DSP
  (lambda (in time chan dat)
    (* 0.5 (synth0 in time chan dat))))

(dsp:set! dsp)

(define play-list
  (lambda (time instr evt-lst dur-lst velo-lst)
    (if (not (eq? '() evt-lst))
      (begin
        (play-note time instr (car evt-lst) (car velo-lst) (car dur-lst))
	(io:osc:send time 
	     address
	     "/Tessellation/Point/"
	     (random)
	     (random)
	     (* (random) 0.5)
	     0
	     (random)
	     (random)
	     (random)
	     (random)
	     (random)
	     (random)
	     0
	     (random)
	     (random)
	     (random)
	     (/ (car dur-lst) 48000.0))
        (callback (+ time (car dur-lst)) 'play-list (+ time (car dur-lst))
                                                    instr
                                                    (cdr evt-lst)
                                                    (cdr dur-lst)
						    (cdr velo-lst))))))

(define play-list
  (lambda (time instr evt-lst dur-lst velo-lst)
    (if (not (eq? '() evt-lst))
      (begin
        (play-note time instr (car evt-lst) (car velo-lst) (car dur-lst))
	(send-point time 
		    (point (random) (random) (* (random) 0.5) 0 1.0 (random) 0.0)
		    (point (random) (random) (* (random) 0.5) 0 0.0 0.0 0.0)
		    (/ (car dur-lst) 44000.0))
	(send-line time 
		    (line (random) (random) (random) (random) (* (random) 0.5) 0 (random) (random) (random))
		    (line (random) (random) (random) (random) (* (random) 0.5) 0 (random) (random) (random))
		    (/ (car dur-lst) 44000.0))
	(send-background time (random 0 1))
        (callback (+ time (car dur-lst)) 'play-list (+ time (car dur-lst))
                                                    instr
                                                    (cdr evt-lst)
                                                    (cdr dur-lst)
						    (cdr velo-lst))))))


(play-note (now) synth0 60 100 10000)

(play-list (now) synth0 (list (random 40 47 52)
			      (random 40 47 52)
			      (random 40 47 52)
			      (random 40 47 52))
			      '(440000 440000 440000 440000) '(100 70 80 60))


(send-point (now) 
	    (point (random) (random) (* (random) 0.5) 0 (random) (random) (random))
	    (point (random) (random) (* (random) 0.5) 0 (random) (random) (random))
	    (/ 48000 48000.0))

(send-line (now)
	   (line (random) (random) (random) (random) (* (random) 0.1) 0 (random) (random) (random))
	   (line (random) (random) (random) (random) (* (random) 0.1) 0 (random) (random) (random))
	   (/ 48000 48000.0))

(send-background (now) 0)
(send-background (now) 1)
(send-background (now) 2)
(send-background (now) 3)



(point (random) (random) (* (random) 0.5) 0 (random) (random) (random))

(define send-background
  (lambda (time pattern)
    (io:osc:send time
		 address
		 "/Tessellation/Background/"
		 pattern)))

(define send-point
  (lambda (time pt0 pt1 dur)
    (io:osc:send time 
		 address
		 "/Tessellation/Point/"
		 (point-x pt0)
		 (point-y pt0)
		 (point-radius pt0)
		 (point-state pt0)
		 (point-sfp pt0)
		 (point-stp pt0)
		 (point-expr pt0)
		 (point-x pt1)
		 (point-y pt1)
		 (point-radius pt1)
		 (point-state pt1)
		 (point-sfp pt1)
		 (point-stp pt1)
		 (point-expr pt1)
		 dur)))


(define send-line
  (lambda (time ln0 ln1 dur)
    (io:osc:send time 
		 address
		 "/Tessellation/Line/"
		 (line-x0 ln0)
		 (line-y0 ln0)
		 (line-x1 ln0)
		 (line-y1 ln0)
		 (line-width ln0)
		 (line-state ln0)
		 (line-sfp ln0)
		 (line-stp ln0)
		 (line-expr ln0)
		 (line-x0 ln1)
		 (line-y0 ln1)
		 (line-x1 ln0)
		 (line-y1 ln0)
		 (line-width ln1)
		 (line-state ln1)
		 (line-sfp ln1)
		 (line-stp ln1)
		 (line-expr ln1)
		 dur)))

(begin


  (define point
    (lambda (x y radius state stp sfp expr)
      (list x y radius state stp sfp expr)))

  (define point-x
    (lambda (pt)
      (list-ref pt 0)))

  (define point-y
    (lambda (pt)
      (list-ref pt 1)))

  (define point-radius
    (lambda (pt)
      (list-ref pt 2)))

  (define point-state
    (lambda (pt)
      (list-ref pt 3)))

  (define point-stp
    (lambda (pt)
      (list-ref pt 4)))

  (define point-sfp
    (lambda (pt)
      (list-ref pt 5)))

  (define point-expr
    (lambda (pt)
      (list-ref pt 6)))

  (define line
    (lambda (x0 y0 x1 y1 width state stp sfp expr)
      (list x0 y0 x1 y1 width state stp sfp expr)))

  (define line-x0
    (lambda (ln)
      (list-ref ln 0)))

  (define line-y0
    (lambda (ln)
      (list-ref ln 1)))

  (define line-x1
    (lambda (ln)
      (list-ref ln 2)))

  (define line-y1
    (lambda (ln)
      (list-ref ln 3)))

  (define line-width
    (lambda (ln)
      (list-ref ln 4)))

  (define line-state
    (lambda (ln)
      (list-ref ln 5)))

  (define line-stp
    (lambda (ln)
      (list-ref ln 6)))

  (define line-sfp
    (lambda (ln)
      (list-ref ln 7)))

  (define line-expr
    (lambda (ln)
      (list-ref ln 8)))


)

(define play-list
  (lambda (time instr evt-lst dur-lst velo-lst)
    (if (not (eq? '() evt-lst))
      (begin
	(io:osc:send time 
	     address
	     "/Tessellation/Point/"
	     (random)
	     (random)
	     (* (random) 0.5)
	     (random 0 1)
	     (random)
	     (random)
	     1.0
	     (random)
	     (random)
	     0
	     (random)
	     (random)
	     (random)
	     1.0
	     5.0)
        (callback (+ time (car dur-lst)) 'play-list (+ time (car dur-lst))
                                                    instr
                                                    (cdr evt-lst)
                                                    (cdr dur-lst)
						    (cdr velo-lst))))))

(play-list (now) synth0 '(60 65 67 71) '(100 70 80 60) '(48000 48000 48000 48000))


(io:osc:send (+ (now) (* *second* 0.01))
	     address
	     "/Tessellation/Point/"
	     (random)
	     (random)
	     (* (random) 0.5)
	     (random 0 1)
	     (random)
	     (random)
	     1.0
	     (random)
	     (random)
	     0
	     (random)
	     (random)
	     (random)
	     1.0
	     5.0)

0 : begin_x
1 : begin_y
2 : begin_radius
3 : state
4 : stp
5 : sfp
6 : exp
7 : end_x
8 : end_y
9 : end_radius
10: end_state
11: end_stp
12: end_sfp
13: end_exp
14: dur

(io:osc:send (+ (now) (* *second* 0.01))
	     address
	     "/Tessellation/Line/"
	     (random)
	     (random)
	     (random)
	     (random)
	     (* (random) 0.5)
	     (random 0 1)
	     (random)
	     (random)
	     (random)
	     (random)
	     1.0
	     (random)
	     (random)
	     0
	     (random)
	     (random)
	     (random)
	     1.0
	     5.0)

0 : begin_x0
1 : begin_y0
2 : begin_x0
3 : begin_y0
4 : begin_width
5 : state
6 : stp
7 : sfp
8 : exp
9 : end_x0
10: end_y0
11: end_x0
12: end_y0
12: end_width
14: end_state
15: end_stp
16: end_sfp
17: end_exp
18: dur

(random 
(io:osc:send (+ (now) (* *second* 0.01))
	     address
	     "/Tessellation/Point/"
	     (random)
	     (random)
	     (* (random) 0.5)
	     (random 0 1)
	     (random)
	     (random)
	     1.0
	     (random)
	     (random)
	     0
	     (random)
	     (random)
	     (random)
	     1.0
	     5.0)

(io:osc:send (+ (now) (* *second* 0.01))
	     address
	     "/Tessellation/Line/"
	     (random)
	     (random)
	     (random)
	     (random)
	     (* (random) 0.5)
	     (random 0 1)
	     (random)
	     (random)
	     (random)
	     (random)
	     1.0
	     (random)
	     (random)
	     0
	     (random)
	     (random)
	     (random)
	     1.0
	     5.0)
)
